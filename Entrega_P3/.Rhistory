modelo %*% c(1,2,3)
model.offset()
modelo.coefficients
modelo.coefficients
modelo <- lm(bajoPeso$presSist ~ bajoPeso$edadG + bajoPeso$apgar5)
summary(modelo)
subset <- bajoPeso[bajoPeso$apgar5==7 && bajoPeso$edadG==32,]
modelo.coefficients
modelo.coefficients
modelo$coefficients
modelo$coefficients * subset
modelo$coefficients %*% subset
subset
bajoPeso$edadG==32,
bajoPeso$edadG==32
bajoPeso$apgar5==7
bajoPeso$apgar5==7 && bajoPeso$edadG==32
bajoPeso$apgar5==7 & bajoPeso$edadG==32
subset <- bajoPeso[bajoPeso$apgar5==7 & bajoPeso$edadG==32,]
subset
modelo$coefficients %*% subset
modelo$coefficients %*% t(subset)
t(subset)
modelo$coefficients
modelo$coefficients %*% t(subset)
t(subset)
modelo$coefficients %*% t(c(1,subset$edadG,subset$apgar5))
t(modelo$coefficients) %*% c(1,subset$edadG,subset$apgar5)
subset <- bajoPeso[bajoPeso$apgar5==7 & bajoPeso$edadG==32,]
t(modelo$coefficients) %*% c(1,subset$edadG,subset$apgar5)
subset <- bajoPeso[bajoPeso$apgar5==7 & bajoPeso$edadG==31,]
t(modelo$coefficients) %*% c(1,subset$edadG,subset$apgar5)
subset
t(modelo$coefficients) %*% cbind(1,subset$edadG,subset$apgar5)
max(t(modelo$coefficients) %*% cbind(1,subset$edadG,subset$apgar5))
subset <- bajoPeso[bajoPeso$apgar5==7 & bajoPeso$edadG==31,]
max(t(modelo$coefficients) %*% cbind(1,subset$edadG,subset$apgar5))
50/37
knitr::opts_chunk$set(echo = TRUE)
X <- cbind(1,bajoPeso$edadG,bajoPeso$apgar5)
Y <- cbind(bajoPeso$presSist)
D <- inv(t(X)%*%X)
D <- inverse(t(X)%*%X)
D <- solve(t(X)%*%X)
D
t(X)%*%X
Coef <- D %*% t(X) %*% Y
Coef
S2 <- (Y-Pred)*(Y-Pred)/(length(Y)-length(Coef))
Pred <- X %*% Coef
S2 <- (Y-Pred)*(Y-Pred)/(length(Y)-length(Coef))
S2
S2 <- (Y-Pred)%*%(Y-Pred)/(length(Y)-length(Coef))
S2 <- t(Y-Pred)%*%(Y-Pred)/(length(Y)-length(Coef))
S2
Y-Pred
X <- cbind(1,bajoPeso$edadG,bajoPeso$apgar5)
Y <- cbind(bajoPeso$presSist)
D <- solve(t(X)%*%X)
Coef <- D %*% t(X) %*% Y
Pred <- X %*% Coef
S2 <- t(Y-Pred)%*%(Y-Pred)/(length(Y)-length(Coef))
S2
summary(modelo)$sigma
summary(modelo)$sigma**2
summary(modelo)
names(summary(modelo))
summary(modelo)$aliased
names(summary(modelo))
summary(modelo)$call
names(summary(modelo))
summary(modelo)
Sigma <- S2 * D
S2
D
Sigma <- S2 %*% D
Sigma <- S2 * D
Sigma <- S2[1,1] * D
S2[1,1]
S2 <- t(Y-Pred)%*%(Y-Pred)/(length(Y)-length(Coef))[1,1]
S2 <- (t(Y-Pred)%*%(Y-Pred)/(length(Y)-length(Coef)))[1,1]
Sigma <- S2 * D
Sigma
VarBeta <- S2 * D
t <- coefi/sqrt(diag(D))
t <- Coef/sqrt(diag(D))
t
qt(t)
qt(t,df=(length(Y)-length(Coef)))
qt(t[1],df=(length(Y)-length(Coef)))
qt(t[1],df=(length(Y)-length(Coef)))
t <- Coef/sqrt(diag(D))
t
(length(Y)-length(Coef))
qt(t,df=(length(Y)-length(Coef)))
pt(t,df=(length(Y)-length(Coef)))
t
pt(1,df=(length(Y)-length(Coef)))
pt(12,df=(length(Y)-length(Coef)))
pt(t,df=(length(Y)-length(Coef)))
print(pt(t,df=(length(Y)-length(Coef))))
Coef/sqrt(diag(D))
Coef
t <- Coef/sqrt(diag(VarBeta))
pt(t,df=(length(Y)-length(Coef)))
abs(0.5-pt(t,df=(length(Y)-length(Coef))))*2
D
abs(0.5-pt(t,df=(length(Y)-length(Coef))))*2
Cor(Y,pred)
cor(Y,pred)
cor(Y,Pred)
cor(Y,Pred)/(var(Y)*var(Pred))
cov(Y,Pred)/(var(Y)*var(Pred))
cov(Y,Pred)/((var(Y)*var(Pred))**0.5)
var(Pred)
var(Y)
cov(Y,Pred)/((var(Y)*var(Pred))**0.5)
Cor(Y,Pred)
cor(Y,Pred)
cov(Y,Pred)/((var(Y)*var(Pred))**0.5)
cor(Y,Pred)
X <- cbind(1,bajoPeso$edadG,bajoPeso$apgar5)
Y <- cbind(bajoPeso$presSist)
D <- solve(t(X)%*%X)
Coef <- D %*% t(X) %*% Y
Pred <- X %*% Coef
S2 <- (t(Y-Pred)%*%(Y-Pred)/(length(Y)-length(Coef)))[1,1]
VarBeta <- S2 * D
t <- Coef/sqrt(diag(VarBeta))
abs(0.5-pt(t,df=(length(Y)-length(Coef))))*2
cov(Y,Pred)/((var(Y)*var(Pred))**0.5)
cor(Y,Pred)
plot(Pred,Y-Pred)
cor(Pred,Y-Pred)
plot(Pred,Y-Pred)
cor(Pred,Y-Pred)
plot(summary(modelo))
plot(summary(Modelo))
plot(summary(modelo))
modelo
summary(modelo)
plot(summary(modelo))
bajoPeso <- read.csv("~/bajoPeso.txt", sep="")
print(bajoPeso)
plot(bajoPeso$apgar5,bajoPeso$presSist)
La relacion podria ser lineal pero no se ve algo del todo claro. Hay mucho ruido
modelo <- lm(bajoPeso$presSist ~ bajoPeso$edadG + bajoPeso$apgar5)
summary(modelo)
subset <- bajoPeso[bajoPeso$apgar5==7 & bajoPeso$edadG==31,]
max(t(modelo$coefficients) %*% cbind(1,subset$edadG,subset$apgar5))
X <- cbind(1,bajoPeso$edadG,bajoPeso$apgar5)
Y <- cbind(bajoPeso$presSist)
D <- solve(t(X)%*%X)
Coef <- D %*% t(X) %*% Y
Pred <- X %*% Coef
S2 <- (t(Y-Pred)%*%(Y-Pred)/(length(Y)-length(Coef)))[1,1]
VarBeta <- S2 * D
t <- Coef/sqrt(diag(VarBeta))
abs(0.5-pt(t,df=(length(Y)-length(Coef))))*2
cov(Y,Pred)/((var(Y)*var(Pred))**0.5)
cor(Y,Pred)
plot(Pred,Y-Pred)
cor(Pred,Y-Pred)
plot(summary(modelo))
plot(Pred,Y-Pred)
cor(Pred,Y-Pred)
plot(summary(modelo))
plot(modelo)
plot(modelo)
help(qgamma)
qgamma(0.05,10)
qgamma(0.95,10)
1-qgamma(0.95,10)
qgamma(0.95,10)
qgamma(0.95,10,0.5)
qgamma(0.05,10,0.5)
2*(1-pt(-2.399,41))
2*(pt(-2.399,41))
help(pt)
2*(pt(8.4,41))
2*(1-pt(8.4,41))
2*(1-pt(-0.736,41))
2*(pt(-0.736,41))
2*(pt(-2.399,41))
help(summary)
?qgamma
qgamma(0.95,10)
qgamma(0.05,10)
qgamma(0.05,10,scale = 0.5)
qgamma(0.95,10,scale = 0.5)
qgamma(0.05,10,scale = 0.5)
pgamma(3.92,10,scale=0.5)
qt(0.025,44)
qt(0.975,44)
install.packages("terra")
install.packages("humidity")
rm(list = ls)
rm(list = ls())
library(humidity)
?svp
?SVP()
es_25 <- SVP(25)
SVP(25+273.15)
es_25 <- SVP(25, isK = F)
es_27 <- SVP(27, isK = F)
(es_27-es_25)100/es_25
(es_27-es_25)*100/es_25
(SVP(26, isK = F)-es_25)/es_25
(SVP(26, isK = F)-es_25)*100/es_25
porcentaje <- (es_27-es_25)*100/es_25
porcentaje_2 <- NULL
?while
()
T_i <- 25
porcentaje_2 <- NULL
es <- NULL
while(T_i <= 100){
es <- c(es, SVD(T_i, isK = F))
T_i <- T_i + 1
}
getwd()
library(humidity)
?SVP()
es_25 <- SVP(25, isK = F)
es_27 <- SVP(27, isK = F)
porcentaje <- (es_27-es_25)*100/es_25
print(paste('El porcentaje de cambio de la capacidad del aire par obtener vapor',
'aumento un', porcentaje, 'al incrementarse la temperatura desde 25°C a 27°C'))
T_i <- 25
es <- NULL
while(T_i <= 100){
es <- c(es, SVP(T_i, isK = F))
T_i <- T_i + 1
}
porcentaje_2 <- (es-es[1])*100/es[1]
?data.frame
resultado <- data.frame('Temperatura (°C)' <- 25:100)
resultado$es <- es
es
resultado$porcentaje_aumento <- porcentajee_2
resultado$porcentaje_aumento <- porcentaje_2
View(resultado)
(SVP(18, isK = F)-SVP(17, isK = F))/SVP(17, isK = F)
(SVP(16, isK = F)-SVP(15, isK = F))/SVP(15, isK = F)
View(resultado)
es
es[1:-2]
es[1:75]
porcentaje_2 <- (es[2:76]-es[1:75])*100/es[1:75]
porcentaje_2
resultado$porcentaje_aumento <- porcentaje_2
resultado$porcentaje_aumento <- c(NA, porcentaje_2)
View(resultado)
setwd("")
#setwd("")
```
#setwd("")
35
rm(list = ls())
rm(list = ls())
getwd()
library(humidity)
?SVP()
es_25 <- SVP(25, isK = F)
es_27 <- SVP(27, isK = F)
porcentaje <- (es_27-es_25)*100/es_25
print(paste('El porcentaje de cambio de la capacidad del aire par obtener vapor',
'aumento un', porcentaje, 'al incrementarse la temperatura desde 25°C a 27°C'))
T_i <- 25
es <- NULL
while(T_i <= 100){
es <- c(es, SVP(T_i, isK = F))
T_i <- T_i + 1
}
porcentaje_2 <- (es[2:76]-es[1:75])*100/es[1:75]
resultado <- data.frame('Temperatura (°C)' <- 25:100)
resultado$es <- es
resultado$porcentaje_aumento <- c(NA, porcentaje_2)
resultado <- data.frame('Temperatura (°C)' = 25:100)
resultado$es <- es
resultado$porcentaje_aumento <- c(NA, porcentaje_2)
plot(x = resultado$Temperatura...C., y = resultado$porcentaje_aumento)
plot(x = resultado$Temperatura...C., y = resultado$porcentaje_aumento, xlab = 'Temperatura', ylab = '%', main = 'Porcentaje de aumente se es respecto de un grado menos de temperatura')
plot(x = resultado$Temperatura...C., y = resultado$porcentaje_aumento, xlab = 'Temperatura', ylab = '%', main = 'Porcentaje de aumento se es respecto de un grado menos de temperatura')
(SVP(50, isK = F)-SVP(49, isK = F))*100/SVP(49, isK = F)
(SVP(100, isK = F)-SVP(99, isK = F))*100/SVP(99, isK = F)
resultado$porcentaje_aumento[-1]
resultado$porcentaje_aumento[76]
View(resultado)
plot(resultado$})
plot(resultado$es)
library(humidity)
help(SVD)
help(SDV)
help(SDP)
help(SVP)
help(SVP)
print(help(SVP))
print(paste('La presión de vapor de saturación a 25°C es', es_25, 'hPa, y a 27°C es', es_27, 'hPa'))
print(paste('La presión de vapor de saturación a 25°C es', es_25, 'hPa, \n y a 27°C es', es_27, 'hPa'))
print(paste('La presión de vapor de saturación a 25°C es', es_25, 'hPa, \t y a 27°C es', es_27, 'hPa'))
print(paste('La presión de vapor de saturación a 25°C es', es_25, 'hPa,','\t','y a 27°C es', es_27, 'hPa'))
print(paste('La presión de vapor de saturación a 25°C es', es_25, 'hPa,','\n','y a 27°C es', es_27, 'hPa'))
print(paste('La presión de vapor de saturación a 25°C es', es_25, 'hPa,','\n','y a 27°C es', es_27, 'hPa'))
print(paste('La presión de vapor de saturación a 25°C es', es_25, 'hPa y a 27°C es', es_27, 'hPa'))
BD_cangrejos <- read.csv("~/Escritorio/BIOME CANDE/BD_cangrejos.txt", sep="")
View(BD_cangrejos)
datos<-BD_cangrejos
BD_cangrejos <- read.csv("~/Escritorio/BIOME CANDE/BD_cangrejos.txt", sep="")
View(BD_cangrejos)
datos<-BD_cangrejos
shapiro.test(datos$Peso_branquias)
shapiro.test(datos$Peso_branquias)
shapiro.test(datos$Peso_cuerpo)
cor.test(datos$Peso_branquias. datos$Peso_cuerpo)
cor.test(datos$Peso_branquias, datos$Peso_cuerpo)
?cor.test
cor.test(datos$Peso_branquias, datos$Peso_cuerpo, conf.level = 99)
cor.test(datos$Peso_branquias, datos$Peso_cuerpo, conf.level = 0.99)
shapiro.test(datos$Peso_branquias)
shapiro.test(datos$Peso_cuerpo)
cor.test(datos$Peso_branquias, datos$Peso_cuerpo)
BD_endotoxina <- read.delim("~/Escritorio/BIOME CANDE/BD_endotoxina.txt")
View(BD_endotoxina)
datos<-BD_endotoxina
plot(datos)
View(BD_cangrejos)
modelo <- lm(datos$Absorbancia~datos$Endotoxina, data= datos)
View(modelo)
modelo <- lm(datos$Absorbancia~datos$Endotoxina, data= datos)
datos$predichos=modelo$fitted.values
datos$residuos=modelo$residuals
plot(datos$predichos,datos$residuos)
abline(0,0)
summary(modelo)
shapiro.test(datos$residuos)
summary(modelo)
confint(modelo)
View(datos)
View(datos)
confint(modelo)
?confint
confint(modelo, level = 0.95)
confint(modelo, level=0.90)
confint(modelo, level=0.95)
predict(modelo, newdata = new.dat, interval = "Confidence")
new.dat<-(datos$Endotoxina = 800)
predict(modelo, newdata = new.dat, interval = "Confidence")
new.dat<-data.frame(Endotoxina = 800)
predict(modelo, newdata = new.dat, interval = "Confidence")
modelo <- lm(Absorbancia~Endotoxina, data= datos)
datos$predichos=modelo$fitted.values
datos$residuos=modelo$residuals
plot(datos$predichos,datos$residuos)
abline(0,0)
plot(datos$residuos,datos$predichos)
abline(0,0)
datos$residuos=modelo$residuals
plot(datos$residuos,datos$predichos)
abline(0,0)
modelo <- lm(Absorbancia~Endotoxina, data= datos)
datos$predichos=modelo$fitted.values
datos$residuos=modelo$residuals
plot(datos$residuos,datos$predichos)
plot(datos$predichos,datos$residuos)
abline(0,0)
View(datos)
datos$predichos=modelo$fitted.values
modelo <- lm(Absorbancia~Endotoxina, data= datos)
datos$predichos=modelo$fitted.values
datos$residuos=modelo$residuals
plot(datos$predichos,datos$residuos)
abline(0,0)
View(datos)
View(datos)
BD_endotoxina <- read.delim("~/Escritorio/BIOME CANDE/BD_endotoxina.txt")
View(BD_endotoxina)
modelo <- lm(Absorbancia~Endotoxina, data= datos)
datos$predichos=modelo$fitted.values
datos$residuos=modelo$residuals
datos<-BD_endotoxina
plot(datos)
modelo <- lm(Absorbancia~Endotoxina, data= datos)
datos$predichos=modelo$fitted.values
datos$residuos=modelo$residuals
plot(datos$predichos,datos$residuos)
abline(0,0)
#Ho: hay buen ajuste a la normal
#Ha: hay mal ajuste a la normal
shapiro.test(datos$residuos)
summary(modelo)
confint(modelo, level=0.95)
new.dat<-data.frame(Endotoxina = 800)
predict(modelo, newdata = new.dat, interval = "Confidence")
predict(modelo, newdata = new.dat, interval = "confidence")
##############Ejercicio para entregar######################
#Consigna:armar una lista de listas (array de listas) que contenga los datos correspondientes a cada estacion
#como ası tambien informacion asociada a cada estacon en particular: nombre, latitud, longitud,
#altura y codigo de identificacion. Convertir los valores de temperatura y td
#a grados centıgrados. La informacion sobre la ubicaci´on de cada estaci´on esta disponible en el
#archivo estaciones.txt
rm(list=ls())
setwd("C:/Users/Fernando Cabrera/Desktop/Cami_Labo/Entregas/")
setwd("/home/clinux01/Escritorio/Cami_Labo/Entregas/Entrega_P3/")
#funcion para cambiar las unidades de las variables les T y Td
convertir_faren_centigrados <- function (Temperatura) {
t <- (Temperatura - 32) * 5/9
return(t)
}
resultados<-list()
dato_faltante<- -999.9  #defini el dato faltante
datos_estaciones<-read.table("estaciones.txt", header = FALSE) #lee los datos del txt
for(i in 1:nrow(datos_estaciones)){
nombre_aeropuerto<-datos_estaciones[i, 1]
nombre_archivo <- paste0(nombre_aeropuerto,".txt")
datos_aero<-read.table(nombre_archivo,header = FALSE)
datos_aero[which(datos_aero==dato_faltante)]<-NA
datos_aero[[1]]<-NULL
colnames(datos_aero)[1]<-"Fecha"
colnames(datos_aero)[2]<-"Temperatura"
colnames(datos_aero)[3]<-"Td"
colnames(datos_aero)[4]<-"Presion"
datos_aero[,2]<-(convertir_faren_centigrados(datos_aero[,2]))
datos_aero[,3]<-convertir_faren_centigrados(datos_aero[,3])
listaestaciones<-list(c(Nombre=nombre_aeropuerto,
Latitud=datos_estaciones[i,2],
Longitud=datos_estaciones[i,3],
Altura=datos_estaciones[i,4],
Codigo=datos_estaciones[i,5],
as.list(datos_aero)))
resultados<-c(resultados, listaestaciones)
}
names(resultados)<-c("Azul","Aeroparque","Catamarca","Chilecito","Iguazu","Mendoza")
View(resultados)
View(datos_estaciones)
for(i in 1:nrow(datos_estaciones)){
nombre_aeropuerto<-datos_estaciones[i, 1]
nombre_archivo <- paste0(nombre_aeropuerto,".txt")
datos_aero<-read.table(nombre_archivo,header = FALSE)
datos_aero[which(datos_aero==dato_faltante)]<-NA
datos_aero[[1]]<-NULL
colnames(datos_aero)[1]<-"Fecha"
colnames(datos_aero)[2]<-"Temperatura"
colnames(datos_aero)[3]<-"Td"
colnames(datos_aero)[4]<-"Presion"
datos_aero[,2]<-(convertir_faren_centigrados(datos_aero[,2]))
datos_aero[,3]<-convertir_faren_centigrados(datos_aero[,3])
listaestaciones<-list(c(
Latitud=datos_estaciones[i,2],
Longitud=datos_estaciones[i,3],
Altura=datos_estaciones[i,4],
Codigo=datos_estaciones[i,5],
as.list(datos_aero)))
resultados<-c(resultados, listaestaciones)
}
View(resultados)
names(resultados)<-c("Azul","Aeroparque","Catamarca","Chilecito","Iguazu","Mendoza")
View(resultados)
setwd("/home/clinux01/Escritorio/Cami_Labo/Entregas/Entrega_P3/")
#funcion para cambiar las unidades de las variables les T y Td
convertir_faren_centigrados <- function (Temperatura) {
t <- (Temperatura - 32) * 5/9
return(t)
}
resultados<-list()
dato_faltante<- -999.9  #defini el dato faltante
datos_estaciones<-read.table("estaciones.txt", header = FALSE) #lee los datos del txt
for(i in 1:nrow(datos_estaciones)){
nombre_aeropuerto<-datos_estaciones[i, 1]
nombre_archivo <- paste0(nombre_aeropuerto,".txt")
datos_aero<-read.table(nombre_archivo,header = FALSE)
datos_aero[which(datos_aero==dato_faltante)]<-NA
datos_aero[[1]]<-NULL
colnames(datos_aero)[1]<-"Fecha"
colnames(datos_aero)[2]<-"Temperatura"
colnames(datos_aero)[3]<-"Td"
colnames(datos_aero)[4]<-"Presion"
datos_aero[,2]<-(convertir_faren_centigrados(datos_aero[,2]))
datos_aero[,3]<-convertir_faren_centigrados(datos_aero[,3])
listaestaciones<-list(c(Nombre=nombre_aeropuerto,
Latitud=datos_estaciones[i,2],
Longitud=datos_estaciones[i,3],
Altura=datos_estaciones[i,4],
Codigo=datos_estaciones[i,5],
as.list(datos_aero)))
resultados<-c(resultados, listaestaciones)
}
View(resultados)
names(resultados)<-c("Azul","Aeroparque","Catamarca","Chilecito","Iguazu","Mendoza")
#Parte 2 ej 2
#una funcion que permita obtener todas las estaciones que estan dentro de una
#determinada region definida por una latitud maxima, una latitud mınima, una
#longitud maxima y una longitud mınima. En el caso que no haya, devuelva el
#mensaje ”No hay estaciones cercanas”
estaciones_cercanas <- function(estaciones, lat_max, lat_min, lon_max, lon_min) {
estaciones_cercas <- list()
for (estacion in estaciones) {
latitud <- estacion$Latitud
longitud <- estacion$Longitud
if (latitud <= lat_max && latitud >= lat_min && longitud <= lon_max && longitud >= lon_min) {
estaciones_cercas<- append(estaciones_cercas, list(estacion))
}
}
if (length(estaciones_cercas) > 0) {
return(estaciones_cercas)
} else{
return("No hay estaciones cercanas")
}
}
View(resultados)
estaciones_cercanas(resultados,-35.8,-39,-59.9,60)
resultados$Azul$Latitud
